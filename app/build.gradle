apply plugin: 'com.android.application'

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}
android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    signingConfigs {
        ztesoft {
            storeFile file("ztesoft-release.keystore")
            storePassword "9LEJKE28#FEAKCHK37CSLJ3"
            keyAlias "ztesoft"
            keyPassword "9LEJKE28#FEAKCHK37CSLJ3"
        }

        debug {
            keyAlias 'ztesoft_debug'
            keyPassword 'ztesoftdebug'
            storeFile file('ztesoft_debug_key.jks')
            storePassword 'ztesoftdebug'
        }
    }

    defaultConfig {
        applicationId "com.example.francis.testandroid"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }


        debug{
            //在基础的applicationId上加上后缀
            applicationIdSuffix ".debug"
        }

        //配置不同的构建类型
        //buildType的一些属性查询
        // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html#com.android.build.gradle.internal.dsl.BuildType:applicationIdSuffix
//        jniDebug{
//            //允许复制其他构建类型的参数, 在其基础上进行修改
//            initWith debug
//
//            applicationIdSuffix ".jnidebug"
//            //此构建类型是否配置为使用可调试的本地代码生成APK
//            jniDebuggable true
//        }


    }
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a'
            universalApk true
        }
    }

    //组合多个build flavors, 例如, 这里会选择一个 api+mode+buildtype 作为一个组合
    //而组合的总数为, api个数 * mode个数 * buildtype个数 = 3 * 2 * 3 = 18 种组合,
    //可以点击左边的build Variants 就可以选择任意一个组合进行编译
//    flavorDimensions "mode"
//    productFlavors {
//        demo {
//            dimension "mode"
//            applicationIdSuffix ".demo"
//            versionNameSuffix "-demo"
//        }
//        full {
//            dimension "mode"
//            applicationIdSuffix ".full"
//            versionNameSuffix "-full"
//        }

//        minApi24 {
//            dimension "api"
//            minSdkVersion '24'
//            // To ensure the target device receives the version of the app with
//            // the highest compatible API level, assign version codes in increasing
//            // value with API level. To learn more about assigning version codes to
//            // support app updates and uploading to Google Play, read Multiple APK Support
//            versionCode 30000 + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi24"
//        }
//
//        minApi23 {
//            dimension "api"
//            minSdkVersion '23'
//            versionCode 20000  + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi23"
//        }
//
//        minApi21 {
//            dimension "api"
//            minSdkVersion '19'
//            versionCode 10000  + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi21"
//        }
//    }

    //过滤变体, 如下就会过滤minApi21demo组合的变体, 在bulid Variants中就看不到这些组合了
//    variantFilter { variant ->
//        def names = variant.flavors*.name
//        // To check for a certain build type, use variant.buildType.name == "<buildType>"
//        if (names.contains("minApi21") && names.contains("demo")) {
//            // Gradle ignores any variants that satisfy the conditions above.
//            setIgnore(true)
//        }
//    }

    //修改源集设置
    //这里新建了对应的build的java文件夹, debug, 要加main中使用debug目录下的资源, 需要下面的一些配置
    //这里是对资源文件进行了替换
//    sourceSets{
//        main{
//            java.srcDirs = ['debug/java']
//
//            res.srcDirs = ['debug/res']
//
//            manifest.srcFile 'debug/AndroidManifest.xml'
//        }
//    }


    //修改生成的apk名字
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def newName
//            def timeNow
//            def oldFile = output.outputFile
//            def outDirectory = oldFile.parent
//
//            if ("true".equals(rootProject.ext.IS_JENKINS)) {
//                timeNow = rootProject.ext.JENKINS_TIME
//                outDirectory = 'D:/tomcat'
//                newName = 'test' +
//                        rootProject.ext.APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
//            } else {
//                timeNow = getDate()
//                if (variant.buildType.name.equals('debug')) {
//                    newName = "yj-android-v${APP_VERSION}-debug.apk"
//                } else {
//                    newName = 'yj-android-v' +
//                            APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
//                }
//            }
//
//            output.outputFile = new File(outDirectory, newName)
//
//        }
//    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:23.0.0'
    compile 'com.android.support:design:23.0.0'
    //butterknife
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    //okhttp
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile files('src/main/libs/nineoldandroids-2.4.0.jar')

    compile 'com.android.support:recyclerview-v7:23.1.1'

    compile 'com.android.support:cardview-v7:23.0.0'
    //知乎图片选择器
//    compile 'com.zhihu.android:matisse:0.4.3'
    //glide
    compile 'com.github.bumptech.glide:glide:3.7.0'
}
